var React = require("react");

var ReactMixin = {
    componentWillMount: function () {
        console.log("componentWillMount");
    },

    getInitialState: function () {
        return {count: 0};
    },

    incrementCount: function () {
        this.setState({count: this.state.count + 1});
    },
};

var App = React.createClass({
    getDefaultProps: function () {
        return {};
    },
    
    getInitialState: function () {
        return {};
    },
    
    update: function () {
    },

    componentWillReceiveProps: function (nextProps) {
        console.log("componentWillReceiveProps");
    },

    componentWillUpdate: function (nextProps, nextState) {
        console.log("componentWillUpdate");
    },

    componentDidUpdate: function (prevProps, prevState) {
        console.log("componentDidUpdate");
    },
    
    componentDidMount: function (rootNode) {
        console.log("componentDidMount");
    },

    componentWillUnmount: function () {
        console.log("componentWillUnmount");
    },

    render: function () {
        console.log("render");
        return (
            <div style={{padding: 50}}>
                <ButtonComponent txt="this is the button"/>
                <InputComponent txt="this is the input"/>
            </div>
        );
    }
});

var ButtonComponent = React.createClass({
    mixins: [ReactMixin],
    render: function () {
        return (
            <button onClick={this.incrementCount}>{this.props.txt} - {this.state.count}</button>
        );
    },
});

var InputComponent = React.createClass({
    mixins: [ReactMixin],

    componentWillMount: function () {
        setInterval(this.incrementCount, 1000);
    },
    
    render: function () {
        return (
            <input value={this.props.txt + ' - ' + this.state.count}  />
        );
    },
});

var BIcon = React.createClass({
    render: function () {
        return <span {...this.props} className={joinClasses("glyphicon", this.props.className)}></span>;
    }
});

var Slider = React.createClass({
    render: function () {
        return (
            <div>
                <input ref="range" type="range" min="0" max="255" onChange={this.props.update}/>
            </div>
        );
    }
});


module.exports = App;


function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

window.unmount = function () {
    React.unmountComponentAtNode(document.body);
};
